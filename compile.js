// Generated by CoffeeScript 1.4.0
(function() {

  module.exports = function(data, finalcb) {
    var doT, flow, fs, path, readFile, readItem;
    fs = require('fs');
    path = require('path');
    flow = require('flow');
    doT = require('./doT.js');
    readItem = function(item, callback) {
      return flow.exec(function() {
        return fs.stat(item, this);
      }, function(err, stat) {
        var cb;
        if (err) {
          process.stderr.write(err);
          return this(err);
        } else if (stat.isDirectory()) {
          cb = this;
          return flow.exec(function() {
            return fs.readdir(item, this);
          }, function(err, files) {
            var _this = this;
            if (err) {
              process.stderr.write(err);
              return this(err);
            } else {
              return files.forEach(function(file) {
                return readItem(path.join(item, file), _this.MULTI());
              });
            }
          }, function() {
            return cb(null);
          });
        } else {
          return readFile(item, this);
        }
      }, function() {
        return callback(null);
      });
    };
    readFile = function(file, callback) {
      return flow.exec(function() {
        return fs.readFile(file, this);
      }, function(err, text) {
        var f, id, rel;
        if (err) {
          process.stderr.write("Error reading file '" + file + "': '" + err + "\n");
          return this(err);
        } else {
          id = path.basename(file, path.extname(file));
          if (data.base) {
            rel = path.relative(data.base, path.dirname(file)).replace(/\//g, '.');
            if (rel) {
              id = "" + rel + "." + id;
            }
          }
          try {
            f = doT.compile(text);
            doT.addCached(id, f);
            return this(null, f);
          } catch (e) {
            process.stderr.write("Error compiling file '" + file + "': '" + e + "'\n");
            return this(e);
          }
        }
      }, function() {
        return callback(null);
      });
    };
    return flow.exec(function() {
      var _this = this;
      return data.files.forEach(function(val, i) {
        return readItem(val, _this.MULTI());
      });
    }, function() {
      if (finalcb) {
        return finalcb(null, doT.exportCached());
      }
    });
  };

}).call(this);
