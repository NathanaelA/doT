// Generated by CoffeeScript 1.4.0
(function() {
  var child, flow, fs, path;

  fs = require('fs');

  path = require('path');

  flow = require('flow-coffee');

  child = require('child_process');

  module.exports = function(data, finalcb) {
    var doT, readFile, readItem, _ref;
    doT = (_ref = data.doT) != null ? _ref : require('./doT');
    readItem = function(item, callback) {
      return flow.exec(function() {
        return fs.stat(item, this);
      }, function(err, stat) {
        var item_cb;
        if (err) {
          return this(err);
        }
        if (!stat.isDirectory()) {
          return readFile(item, this);
        }
        item_cb = this;
        return flow.exec(function() {
          return fs.readdir(item, this);
        }, function(err, files) {
          var file, _i, _len;
          if (err) {
            return this.multi()(err);
          }
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            readItem(path.join(item, file), this.multi());
          }
          return this.multi()(null);
        }, function(err, results) {
          return item_cb(err);
        });
      }, function(err) {
        return callback(err);
      });
    };
    readFile = function(file, callback) {
      return flow.exec(function() {
        if (file.match(/.haml$/)) {
          child.exec("haml '" + file + "'", this);
          return file = file.slice(0, -5);
        } else {
          return fs.readFile(file, this);
        }
      }, function(err, text) {
        var f, id, rel;
        if (err) {
          return this(err);
        }
        id = path.basename(file, path.extname(file));
        if (data.base) {
          rel = path.relative(data.base, path.dirname(file)).replace(/\//g, '.');
          if (rel) {
            id = "" + rel + "." + id;
          }
        }
        try {
          f = doT.compile(text);
          doT.addCached(id, f);
        } catch (e) {
          return this(e);
        }
        return this(null, f);
      }, function(err, f) {
        return callback(err, f);
      });
    };
    return flow.exec(function() {
      var file, _i, _len, _ref1;
      _ref1 = data.files;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        file = _ref1[_i];
        readItem(file, this.multi());
      }
      return this.multi()(null);
    }, function(err, results) {
      return typeof finalcb === "function" ? finalcb(err, doT.exportCached()) : void 0;
    });
  };

}).call(this);
